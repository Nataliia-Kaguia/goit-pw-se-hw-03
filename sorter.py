import os
import shutil
import sys
from concurrent.futures import ThreadPoolExecutor
from pathlib import Path

# --- –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –∫–æ–ø—ñ—é–≤–∞–Ω–Ω—è –æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª—É ---
def copy_file(file_path: Path, target_root: Path):
    if file_path.is_file():
        ext = file_path.suffix.lower().lstrip('.')  # –Ω–∞–ø—Ä–∏–∫–ª–∞–¥ "jpg", "png"
        if not ext:
            ext = "no_extension"  # —è–∫—â–æ —Ñ–∞–π–ª –±–µ–∑ —Ä–æ–∑—à–∏—Ä–µ–Ω–Ω—è

        target_dir = target_root / ext
        target_dir.mkdir(parents=True, exist_ok=True)

        target_file = target_dir / file_path.name
        shutil.copy2(file_path, target_file)
        print(f"‚úÖ –°–∫–æ–ø—ñ–π–æ–≤–∞–Ω–æ: {file_path} ‚Üí {target_file}")

# --- –†–µ–∫—É—Ä—Å–∏–≤–Ω–∏–π –æ–±—Ö—ñ–¥ –ø–∞–ø–æ–∫ ---
def process_directory(source_dir: Path, target_root: Path, executor: ThreadPoolExecutor):
    for item in source_dir.iterdir():
        if item.is_dir():
            # –∫–æ–∂–Ω—É –ø–∞–ø–∫—É –æ–±—Ä–æ–±–ª—è—î–º–æ –≤ –æ–∫—Ä–µ–º–æ–º—É –ø–æ—Ç–æ—Ü—ñ
            executor.submit(process_directory, item, target_root, executor)
        elif item.is_file():
            executor.submit(copy_file, item, target_root)

# --- –û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è ---
def main():
    if len(sys.argv) < 2:
        print("‚ùå –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: python sorter.py <source_dir> [target_dir]")
        sys.exit(1)

    source_dir = Path(sys.argv[1])
    target_root = Path(sys.argv[2]) if len(sys.argv) > 2 else Path("dist")

    if not source_dir.exists() or not source_dir.is_dir():
        print(f"‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä—ñ—è {source_dir} –Ω–µ —ñ—Å–Ω—É—î –∞–±–æ –Ω–µ —î –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—î—é")
        sys.exit(1)

    target_root.mkdir(parents=True, exist_ok=True)

    print(f"üöÄ –ü–æ—á–∏–Ω–∞—î–º–æ —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è —Ñ–∞–π–ª—ñ–≤ —ñ–∑: {source_dir}")
    print(f"üìÅ –†–µ–∑—É–ª—å—Ç–∞—Ç –±—É–¥–µ —É: {target_root}")

    with ThreadPoolExecutor() as executor:
        process_directory(source_dir, target_root, executor)

    print("‚úÖ –°–æ—Ä—Ç—É–≤–∞–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")

if __name__ == "__main__":
    main()
